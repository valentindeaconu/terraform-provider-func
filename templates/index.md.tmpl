# {{ .ProviderName }} Provider

{{ .Description }}

## Example usage

Considering the following `library.js` file:

```javascript
/**
 * Adds two numbers together.
 *
 * Adds two numbers and returns the sum of the numbers.
 * 
 * @param {number} a - The first number.
 * @param {number} b - The second number.
 * @returns {number} The sum of `a` and `b`.
 */
$$(function sum(a, b) {
  return a + b;
})

/**
 * Returns the smaller of two numbers.
 *
 * Checks which number is smaller and returns it.
 * 
 * @param {number} a - The first number.
 * @param {number} b - The second number.
 * @returns {number} The smaller of `a` and `b`.
 */
$$(function min(a, b) {
  return a > b ? b : a;
})

/**
 * Concatenates two strings.
 * 
 * Same as `sum`, but for strings.
 *
 * @param {string} a - The first string.
 * @param {string} b - The second string.
 * @returns {string} The concatenated string.
 */
$$(function concat(a, b) {
  return a + b;
})

/**
 * Merges two arrays by concatenating them.
 *
 * Same as `sum`, but for arrays.
 * 
 * @param {string[]} a - The first array.
 * @param {string[]} b - The second array.
 * @returns {string[]} A new array containing elements of `a` followed by elements of `b`.
 */
$$(function extend(a, b) {
  return a.concat(b);
})

/**
 * Creates a Person object.
 *
 * Uses values received as parameters and returns an object with those values as fields.
 * 
 * @param {string} name - The name of the person.
 * @param {number} age - The age of the person.
 * @returns {{`{{`}}name: string; age: number;{{`}}`}} An object with two attributes, name and age.
 */
$$(function create_object(name, age) {
  return { name, age };
})
```

Then, the Terraform `main.tf`:

```terraform
terraform {
  required_providers {
    func = {
      source = "valentindeaconu/func"
    }
  }
}

provider "func" {
  library {
    source = "file://$${path.module}/library.js"
  }
}

data "func" "sum" {
  id = "sum"

  inputs = [100, 100]
}

data "func" "create_object" {
  id = "create_object"

  inputs = {
    age  = 35
    name = "Bob"
  }
}

output "results" {
  value = {
    data_sum           = data.func.sum.result                        // 200
    data_create_object = data.func.create_object.result              // { name = "Bob", age = 35 }
    sum                = provider::func::sum(10, 5)                  // 15
    min                = provider::func::min(10, 5)                  // 5
    concat             = provider::func::concat("Hello, ", "world!") // "Hello, world!"
    extend             = provider::func::extend([1, 1, 2], [3])      // [1, 1, 2, 3]
    create_object      = provider::func::create_object("John", 35)   // { name = "John", age = 35 }
  }
}
```

{{ .SchemaMarkdown }}
